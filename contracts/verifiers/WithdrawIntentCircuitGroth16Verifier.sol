// SPDX-License-Identifier: MIT

/* AUTOGENERATED FILE BY HARDHAT-ZKIT. DO NOT EDIT. */

pragma solidity >=0.7.0 <0.9.0;

contract WithdrawIntentCircuitGroth16Verifier {
    // @dev scalar field size
    uint256 public constant SCALAR_FIELD_SIZE =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;
    /// @dev base field size
    uint256 public constant BASE_FIELD_SIZE =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    /// @dev verification key data
    uint256 public constant ALPHA_X =
        20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 public constant ALPHA_Y =
        9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 public constant BETA_X1 =
        4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 public constant BETA_X2 =
        6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 public constant BETA_Y1 =
        21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 public constant BETA_Y2 =
        10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 public constant GAMMA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant GAMMA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant GAMMA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant GAMMA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 public constant DELTA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant DELTA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant DELTA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant DELTA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;

    uint256 public constant IC0_X =
        1878585384181699057663349432841847831126264986746954212987007632579474573649;
    uint256 public constant IC0_Y =
        15389653694377332755309124580229822522057330624594357451887525202001429691875;
    uint256 public constant IC1_X =
        2351401041414142410516492444626274224027787382480579758974440968108418237777;
    uint256 public constant IC1_Y =
        12885053891231961125392530315909423417745066904229357037979219636135308134350;
    uint256 public constant IC2_X =
        20373280644011643987466260249440562593237383126172776983813286498717710361991;
    uint256 public constant IC2_Y =
        1870015720014744153409502138035258103815137080610120369222324311426592176086;
    uint256 public constant IC3_X =
        9772000537053629839364041770816600061345170850405901636135967547355516199929;
    uint256 public constant IC3_Y =
        20741586547415850546993237877135461804837480054571541188381772697402618277886;
    uint256 public constant IC4_X =
        14447888797050181830756155157387506691327265347186965260463336849814253412258;
    uint256 public constant IC4_Y =
        6217620541173454643043775875516611374802011927871808445899458718561316689206;
    uint256 public constant IC5_X =
        4892112446241323162287157451703576816965916684709482799754700521292670428841;
    uint256 public constant IC5_Y =
        16079439173818307401994520675242721207915998025449044510159663371134187632406;
    uint256 public constant IC6_X =
        8748885822720488259590651225306555532272056413273477176291354293978749888388;
    uint256 public constant IC6_Y =
        14894377411441028911011244539220825667510793811748604197447728862852237057210;
    uint256 public constant IC7_X =
        21563553989094475402864822844842918775858269189375778808563143717940000017056;
    uint256 public constant IC7_Y =
        17839712948937317658858893161005390850477398064858714756648033855223468552680;
    uint256 public constant IC8_X =
        10608050176677862524681137922956440361987183754313804124566878578820054874069;
    uint256 public constant IC8_Y =
        9397474794093521682478540716222944622653321969831461704926723082879001385735;
    uint256 public constant IC9_X =
        1450960224847135584510882385897485664487580299433682712617221748797008795663;
    uint256 public constant IC9_Y =
        468461944527825607760552809264255522909045557325910981103482229569054958964;
    uint256 public constant IC10_X =
        7783915606687226148548091790545263160855112209144454430446256576742123549680;
    uint256 public constant IC10_Y =
        1610542158893763299097050099719023493238164995938996818319039042689355961821;
    uint256 public constant IC11_X =
        18343602616608144939734587964929663693728932121799827018613019038796225918888;
    uint256 public constant IC11_Y =
        4602632542781410755825651502166132378099422709636398520205481645122346298513;
    uint256 public constant IC12_X =
        11998822221534702130895467435272130190910608451092290587284493203887559008886;
    uint256 public constant IC12_Y =
        10734426003895478200978110683078554753085733688737928895438733412740021378826;
    uint256 public constant IC13_X =
        17206349121603813062100631144385920858649727205557009409283752282376623466955;
    uint256 public constant IC13_Y =
        2621725300404978190078194883753282967331560209773619344215362338587193066562;
    uint256 public constant IC14_X =
        18823214927951420887964774085479058148473986449142466778192594590324729209963;
    uint256 public constant IC14_Y =
        816897525370153321107267869194191269249632371235094587065917594319243391314;
    uint256 public constant IC15_X =
        4882941762984594474580180894866872395230784610013417172708812952357663569823;
    uint256 public constant IC15_Y =
        11268221521952023957292224011378456252190708669167689607044071776588734302135;
    uint256 public constant IC16_X =
        20429199084158161575923519347080268850995295881142905121019976375556839427338;
    uint256 public constant IC16_Y =
        14954987950357868714844765227754345277046154663132452251042600810371728538673;
    
    /// @dev memory pointer sizes
    uint16 public constant P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE = 128;
    uint16 public constant P_TOTAL_SIZE = 896;

    function verifyProof(
        uint256[2] memory pointA_,
        uint256[2][2] memory pointB_,
        uint256[2] memory pointC_,
        uint256[16] memory publicSignals_
    ) public view returns (bool verified_) {
        assembly {
            function checkField(signal_) -> res_ {
                res_ := lt(signal_, SCALAR_FIELD_SIZE)
            }

            function g1MulAdd(pR_, x_, y_, s_) -> res_ {
                let pointer_ := mload(64) // free pointer

                mstore(pointer_, x_)
                mstore(add(pointer_, 32), y_)
                mstore(add(pointer_, 64), s_)

                res_ := staticcall(6000, 7, pointer_, 96, pointer_, 64) // ecMul
                res_ := and(res_, gt(returndatasize(), 0)) // check that multiplication succeeded

                if iszero(res_) {
                    leave
                }

                mstore(add(pointer_, 64), mload(pR_))
                mstore(add(pointer_, 96), mload(add(pR_, 32)))

                res_ := staticcall(150, 6, pointer_, 128, pR_, 64) // ecAdd
                res_ := and(res_, gt(returndatasize(), 0)) // check that addition succeeded
            }

            function checkPairing(pA_, pB_, pC_, pubSignals_, pointer_) -> res_ {
                let pPairing_ := add(pointer_, P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE)

                mstore(pointer_, IC0_X)
                mstore(add(pointer_, 32), IC0_Y)

                /// @dev compute the linear combination of public signals
                if iszero(g1MulAdd(pointer_, IC1_X, IC1_Y, mload(add(pubSignals_, 0)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC2_X, IC2_Y, mload(add(pubSignals_, 32)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC3_X, IC3_Y, mload(add(pubSignals_, 64)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC4_X, IC4_Y, mload(add(pubSignals_, 96)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC5_X, IC5_Y, mload(add(pubSignals_, 128)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC6_X, IC6_Y, mload(add(pubSignals_, 160)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC7_X, IC7_Y, mload(add(pubSignals_, 192)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC8_X, IC8_Y, mload(add(pubSignals_, 224)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC9_X, IC9_Y, mload(add(pubSignals_, 256)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC10_X, IC10_Y, mload(add(pubSignals_, 288)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC11_X, IC11_Y, mload(add(pubSignals_, 320)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC12_X, IC12_Y, mload(add(pubSignals_, 352)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC13_X, IC13_Y, mload(add(pubSignals_, 384)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC14_X, IC14_Y, mload(add(pubSignals_, 416)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC15_X, IC15_Y, mload(add(pubSignals_, 448)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC16_X, IC16_Y, mload(add(pubSignals_, 480)))) {
                    leave
                }
                
                /// @dev -A
                mstore(pPairing_, mload(pA_))
                mstore(
                    add(pPairing_, 32),
                    mod(sub(BASE_FIELD_SIZE, mload(add(pA_, 32))), BASE_FIELD_SIZE)
                )

                /// @dev B
                mstore(add(pPairing_, 64), mload(mload(pB_)))
                mstore(add(pPairing_, 96), mload(add(mload(pB_), 32)))
                mstore(add(pPairing_, 128), mload(mload(add(pB_, 32))))
                mstore(add(pPairing_, 160), mload(add(mload(add(pB_, 32)), 32)))

                /// @dev alpha1
                mstore(add(pPairing_, 192), ALPHA_X)
                mstore(add(pPairing_, 224), ALPHA_Y)

                /// @dev beta2
                mstore(add(pPairing_, 256), BETA_X1)
                mstore(add(pPairing_, 288), BETA_X2)
                mstore(add(pPairing_, 320), BETA_Y1)
                mstore(add(pPairing_, 352), BETA_Y2)

                /// @dev public signals
                mstore(add(pPairing_, 384), mload(pointer_))
                mstore(add(pPairing_, 416), mload(add(pointer_, 32)))

                /// @dev gamma2
                mstore(add(pPairing_, 448), GAMMA_X1)
                mstore(add(pPairing_, 480), GAMMA_X2)
                mstore(add(pPairing_, 512), GAMMA_Y1)
                mstore(add(pPairing_, 544), GAMMA_Y2)

                /// @dev C
                mstore(add(pPairing_, 576), mload(pC_))
                mstore(add(pPairing_, 608), mload(add(pC_, 32)))

                /// @dev delta2
                mstore(add(pPairing_, 640), DELTA_X1)
                mstore(add(pPairing_, 672), DELTA_X2)
                mstore(add(pPairing_, 704), DELTA_Y1)
                mstore(add(pPairing_, 736), DELTA_Y2)

                res_ := staticcall(181000, 8, pPairing_, 768, pPairing_, 32) // ecPairing
                res_ := and(res_, mload(pPairing_)) // check that pairing succeeded
            }

            let pointer_ := mload(64) // free pointer
            mstore(64, add(pointer_, P_TOTAL_SIZE))

            /// @dev check that all public signals are in F
            verified_ := 1
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 0))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 32))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 64))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 96))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 128))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 160))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 192))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 224))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 256))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 288))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 320))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 352))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 384))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 416))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 448))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 480))))
            
            /// @dev check pairings
            if not(iszero(verified_)) {
                verified_ := checkPairing(pointA_, pointB_, pointC_, publicSignals_, pointer_)
            }
        }
    }
}
